#+TITLE: Notes on Elixir
#+TAGS: elixir
#+CATEGORY: note

* Debugging

** Inspecting queues
#+begin_src elixir
  :recon.proc_count(:message_queue_len, 5)
  :erlang.process_info(Pid,message_queue_len)
  :recon.info(self(), :message_queue_len)
#+end_src

** Inspecting memory
#+begin_src elixir
  :recon.proc_count(:memory, 5)

#+end_src

** Finding current execution stack of a process

~Process.info(pid, :current_stacktrace)~

** Tracing a module (without a process):

~:recon_trace.calls({:Module, :_, :return_trace}, 20, [])~

Tracing a private function:

~:recon_trace.calls({Module.A.B.C, :function_name, :_}, 20, scope: :local)~

** Tracing a module for a process:

~:recon_trace.calls({:_, :_, :_}, 20, [{:pid, server}])~

** Tracing a module to a file

#+BEGIN_SRC elixir
bin/app rpc 'fd = File.open!("/tmp/tracing.log", [:write]);
:recon_trace.calls({:application_name, :_, :return_trace}, 1000,
io_server: fd); spawn(fn -> Application.start(:ssl) end);
Process.sleep(10*1000); File.close(fd)'
#+END_SRC

[[https://stackoverflow.com/questions/1954894/using-trace-and-dbg-in-erlang/1954980#1954980][Source]]

** Tracing with dbg

#+BEGIN_SRC erlang

# :dbg.tracer(:process, {fn {_, 100} -> :dbg.stop_clear; {msg, n} ->:io.format('~p~n', [msg]); n+1 end, 0})

:dbg.tracer()
:dbg.p(:all, :c)
:dbg.tpl(:inet_gethost_native, :_, [])
:dbg.stop_clear()

#+END_SRC

Then look for output with `journalctl -u <service>`.

[[https://stackoverflow.com/questions/1954894/using-trace-and-dbg-in-erlang][Source]]

** Dump messages on disk
#+BEGIN_SRC elixir
defmodule Msgs do
  def write do
    fd = File.open!("/tmp/messages", [:write])    messages =
      Process.info(self(), :messages)
      |> elem(1)
      |> Enum.take(1000)    IO.write(fd, messages |> Enum.map(&inspect/1) |> Enum.join("\n"))    File.close(fd)
  end
endMsgs.write()

#+END_SRC
** Profiling a process
#+BEGIN_SRC elixir
iex(7)> :eprof.start_profiling([Logger])
:profiling
iex(8)> require Logger
Logger
iex(9)> Logger.warn("hello, world!")
2020-04-28 11:24:42.605 pid=<0.2771.0> [warn] : hello, world!
:ok
iex(10)> :eprof.stop_profiling()
:profiling_stopped
iex(11)> :eprof.analyze()


#+END_SRC

** Profiling all processes

#+BEGIN_SRC
:eprof.start_profiling(:erlang.processes())
:eprof.stop_profiling()
:eprof.analyze(:total)
#+END_SRC

** More accurate profiling (slower) and call graphs

#+BEGIN_SRC elixir
  :fprof.start()
  # either all processes
  :fprof.trace([:start, {:procs, :all}])
  # or one pid for the RootSet
  :fprof.trace([:start, {:procs, PID}])
  # run the code here
  :fprof.trace([:stop])
  :fprof.profile()
  :fprof.analyse([:totals, {:dest, '/tmp/analysis.txt'}])
  :fprof.stop()
#+END_SRC

Then in the shell:

#+BEGIN_SRC bash
  erlgrind analysis.txt
  kcachegrind analysis.cgrind
#+END_SRC

** Get IP and port for a :ranch reference

~:ranch.get_addr(ref)~

* Ecto
** Casting and types

With the following code:

#+BEGIN_SRC elixir
defmodule User do
  use Ecto.Schema

  import Ecto.Changeset

  schema "users" do
    field(:name)
    field(:email)
    field(:age, :integer)
  end

  def changeset(user, params \\ %{}) do
    user
    |> cast(params, [:name, :email, :age])
    |> validate_required([:name, :email])
    |> validate_format(:email, ~r/@/)
    |> validate_inclusion(:age, 18..100)
  end
end
#+END_SRC

we can see that `types` field contains the types declaration from the schema:

#+BEGIN_SRC elixir
iex> cs = User.changeset(%User{}, %{name: "J", email: "x@y"})
#Ecto.Changeset<
  action: nil,
  changes: %{name: "J", email: "x@y"},
  errors: [],
  data: #User<>,
  valid?: true,
  ...
>
iex> cs.types
%{id: :id, name: :string, email: :string, age: :integer}
#+END_SRC

but where is this information saved? There is an hidden `__changeset__` function:

#+BEGIN_SRC elixir
iex> User.__info__(:functions)
[
  __changeset__: 0,
  __schema__: 1,
  __schema__: 2,
  __struct__: 0,
  __struct__: 1,
  changeset: 1,
  changeset: 2
]
#+END_SRC

that returns the types:

#+BEGIN_SRC elixir
User.__changeset__()
%{id: :id, name: :string, email: :string, age: :integer}
#+END_SRC

** Create a migration

~mix ecto.gen.migration create_counter~
* Live View

[[https://www.youtube.com/watch?v=c2x1CrP9Szk][Why Is My LiveView Slow and What Can I Do About It]]
