#+TITLE: Updating Clojure namespaces
#+DATE: 2011-11-11
#+TAGS: clojure emacs-lisp

Continuing my experimentations with Emacs Lisp, I created a function
that automatically updates the namespace of a Clojure buffer in
conformity with its pathname. This is useful after renaming a file,
since changing a file pathname requires to change its namespace, which
is sometimes annoying to do by hand.

#+BEGIN_SRC elisp
(defun clojure-correct-ns
  ()
  "Returns the namespace name that the file should have."
 (let* ((nsname ())
        (dirs (reverse (split-string (buffer-file-name) "/")))
        (aftersrc nil))
   (dolist (dir dirs)
     (when (not aftersrc)
       (if (or (string= dir "src") (string= dir "test"))
           (setq aftersrc t)
         (setq nsname (append nsname (list dir "."))))))
   (when nsname
     (replace-regexp-in-string "_" "-" (substring (apply 'concat (reverse nsname))  1 -4)))))

(defun clojure-update-ns
  ()
  "Updates the namespace of the current buffer. Useful if a file has been renamed."
  (interactive)
  (let ((nsname (clojure-correct-ns)))
    (when nsname
      (clojure-find-ns) ;; function defined in clojure-mode
      (replace-match nsname nil nil nil 4))))
#+END_SRC

Once added to your .emacs file, you can call it with:
#+begin_example
M-x clojure-update-ns
#+end_example


It assumes clojure-mode is already loaded.

* Comments from a previous version of this blog
:PROPERTIES:
:CUSTOM_ID: comments
:END:

Kototama

Thanks! An improved version of this function, called clojure-update-ns,
has been integrated into the latest clojure-mode.el, available at
https://github.com/technomancy/clojure-mode

Anonymous

Great little function - thank you! Next step would be to create one that
recursively traverses a directory applies this to every .clj file found
:)
