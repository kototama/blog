#+TITLE: Notes on OCaml
#+TAGS: ocaml
#+CATEGORY: note

* Ocaml, the language
** Reexport a type and derives it

#+BEGIN_SRC ocaml
type t = A | B | C
type u = t = A | B | C [@@deriving show]
#+END_SRC

** On types and decidability

https://discuss.ocaml.org/t/value-restriction-and-mutually-recursive-functions/2432/2


** Basic types
=int= has only 31 bits / 63 bits but =nativint= also exist. =Nat= and =BigInt=
also available. =float= is equivalent to C =double= (double precision). No
single precision float. unit is written =()=.

* Tips
** Utop max lines no truncation

#+BEGIN_SRC
#print_length 100000;;
#+END_SRC

** Utop showing a type

#+begin_src ocaml
#show Map.empty;;
#+end_src

** Rexporting a type

You can re-export the type definition and add a deriving annotation. For instance

~type 'a t = 'a Stdlib.ref = { mutable contents: 'a }~

** Calling stdlib when Base/Core is used
=Stdlib.float_of_int= for example

* With Nix
** nixpkgs + ocaml

~Î» nix shell nixpkgs#ocaml-ng.ocamlPackages_5_0.ocaml_~

* Advantages
- strong type safety
- very expressive
- practical and pragmatic
- not too complicated or too broad in scope
- can compiles to bytecode or native
- has multiple compilers to JavaScript (community work)
- runtime is simple allowing broad usages: exokernel (mirageOS), wasm, JS etc.
* Disadvantages
- few libraries
- the standard library is weak and there are two alternatives (batteries or
  Base/Core). This split the ecosystem even further
- Async code: Lwt or Async, and now with OCaml 5: EIO.
- The inference of the compiler sometimes invalid part of the code which where
  know to be true when changing another part of the code. This happens because
  normally most of the code is not annoted with types, so everything can take a
  new meaning.
