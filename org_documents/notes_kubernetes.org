#+TITLE: Notes on Kubernetes
#+TAGS: kubernetes
#+CATEGORY: note

* Concepts

** Pods
The execution environment running containers. Usually one pod runs one container but sometimes more ("sidecar" container, for example for logging).
It's the minimal entity managed by Kubernetes. Pod have properties such as ~nodeSelector~, ~priority~, ~restartPolicy~ etc.
~restartPolicy=always~ does NOT restart failed or stopped pod, this is the job of Deployment.
** Initcontainer and Sidecar container
sidecar container is an initContainer with ~restartPolicy~ set to ~Always~
** Jobs and cronjob
A job is a pod with ~restartPolicy=never~. Backup, batch processing etc. ~ttlSecondsAfterFinished~ to clean
up. ~completion~ and ~parallelism~ parameters. Ex: ~kubectl create job onejob --image=busybox -- date~

CronJob schedule uses crontab syntax.
- Create with ~kubectl create cronjob myjob --image=busybox --schedule="*/1 * * * *" -- date~
- Test with ~kubectl create job myjob --from=cronjob/mycronjob~ will execute the job
- Clean with ~kubectl delete cronjobs.batch jobname~
** Deployments

Controller that manages the pod. Starts all the pods at the same time.
Self-healing, scaling, rollouts, and rollbacks.

** Services

Route traffic to the selected pods

** Ingress
Reverse HTTP proxy.
- NodePort services works on high ports number only.
- LoadBalancer have a 1:1 mapping from LoadBalancer to a service, so one LoadBalancer is needed per service!

** Service discovery

- Automatic. ClusterDNS registers a new A and SRV records when a new Service is created. SRV record have IP and
a PORT.
- ClusterIPs are on a separate network, no route to it
- ClusteIP service named kube-dns listen on port 53
- [[https://en.wikipedia.org/wiki/IP_Virtual_Server][IPVS (IP Virtual Server)]] is used

** Storage

- Container Storage Interface (CSI) provides a common interface for storage providers
- PersistentVolumes (PV), PersistentVolumeClaims (PVC), StorageClasses (SC)
- topology-aware provisioning is achieved when a PV is created only upon a Pod creation instead of before

** ConfigMaps
- environment variables or files in a volume (or command-line arguments to the container)

** StatefulSets

- Persistent Pod names and DNS names, volume bindings
- Pods created and destroyed one at a time by default (can be changed), useful for some services like distributed databases
- Headless Service = a Service without a ClusterIP
- An Headless Service + StatefulSet = Governing Service
- Governing service creates DNS entries SRV and A for matching (label selector) pods

** Security

- authentification: client certificate or IAM solutions
- RBAC. Deny by default.
- Mutating and validating admission controllers: they intercept the requests

** Kubernetes API

- general available (GA) resources that get deprecated are valid for 12 months or 3 releases before being phased out
- custom resources can be created with a custom controller, allowing to extend the Kubernetes API

** Security Hardening
- ~automountServiceAccountToken: false~ for pods that don't need to communicate with the API server
- Pod Security Standards (PSS): privileged, baseline or restricted. Implemented as validating admission controllers.
- ~kube-bench~
* Commands
- ~kubectl api-resources~
- ~kubectl explain pod~, ~kubectl explain pod.specs~, ~kubectl explain pod.specs.container~ etc. 
- ~kubectl describe pod podname~
- ~kubectl create -f resource.yaml~ (fails if already exists), ~kubectl apply -f resource.yaml~  
- ~kubectl delete -f resource.yaml~, ~kubectl replace -f resource.yaml~
- ~--dry-run=client -o yaml > file.yaml~ as argument to ~kubectl run~ or ~kubectl create~ to generate a YAML file
- ~kubectl get ... -A~ to see resources on all namespaces
- ~kubectl get pods -o wide~  
- ~kubectl get pods podname -o yaml~  
- ~kubectl logs <podname>~
- ~kubectl exec -it podname sh~
- ~kubectl port-forward podname 8080:80~

* Components
Control plane:
- kube-apiserver (~kubectl~ command makes request to it)
- etcd
- kube-scheduler: schedule pods at specific locations
- kube-controller-manager: core processes
Worker nodes:
- container runtimes
- kubelet  
* Solutions
** For on-premises
Google Anthos, Rancher, RedHat OpenShift, Canonical Kubernetes
** Locally
Minikube, K3s, OpenShift Local
